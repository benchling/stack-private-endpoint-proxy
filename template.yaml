AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VPCId:
    Description: VPC to launch NLB in
    Type: AWS::EC2::VPC::Id
  Subnet1Id:
    Description: Main subnet to launch NGINX proxy in - should be us-east-1a, us-east-1c, or us-east-1d
    Type: AWS::EC2::Subnet::Id
  Subnet1AvailabilityZone:
    Description: Availability zone of Subnet1
    Type: AWS::EC2::AvailabilityZone::Name
  Subnet2Id:
    Description: Second subnet needed for NLB - should be us-east-1a, us-east-1c, or us-east-1d
    Type: AWS::EC2::Subnet::Id
  Subnet2AvailabilityZone:
    Description: Availability zone of Subnet2
    Type: AWS::EC2::AvailabilityZone::Name
  KeyName:
    Description: SSH key for NGINX proxy
    Type: AWS::EC2::KeyPair::KeyName
  DestinationIP:
    Description: IP destination target
    Type: String
  DestinationPort:
    Description: Port of destination target
    Type: Number
  SourceCIDR:
    Description: IP CIDR that source traffic is permitted from
    Type: String
  AllowedAWSAccount:
    Description: ID of AWS account permitted to create endpoints to this endpoint service
    Type: String
Resources:
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internal
      Subnets:
      - !Ref Subnet1Id
      - !Ref Subnet2Id
      Type: network
  endpointService:
    Type: "AWS::EC2::VPCEndpointService"
    Properties:
      NetworkLoadBalancerArns:
      - !Ref loadBalancer
      AcceptanceRequired: false
  endpointServicePermissions:
    Type: "AWS::EC2::VPCEndpointServicePermissions"
    Properties:
      AllowedPrincipals:
      - !Sub 'arn:aws:iam::${AllowedAWSAccount}:root'
      ServiceId: !Ref endpointService
  targetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 9100
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: !Ref DestinationPort
      Protocol: TCP
      Targets:
      - Id: !Ref nginxInstance
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPCId
  nginxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for NGINX
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref DestinationPort
        ToPort: !Ref DestinationPort
        CidrIp: !Ref SourceCIDR
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 172.17.0.0/16
      VpcId: !Ref VPCId
  nginxInstance:
    Type: AWS::EC2::Instance
    DependsOn: nginxSecurityGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_install_nginx:
              command: amazon-linux-extras install -y nginx1.12
            02_enable_nginx:
              command: systemctl enable nginx
            03_start_nginx:
              command: systemctl start nginx
          files:
            "/etc/nginx/nginx.conf":
              content: !Sub |
                # This part is copied from the default nginx.conf
                user nginx;
                worker_processes auto;
                error_log /var/log/nginx/error.log;
                pid /run/nginx.pid;

                # Load dynamic modules. See /usr/share/nginx/README.dynamic.
                include /usr/share/nginx/modules/*.conf;

                events {
                    worker_connections 1024;
                }

                # This part is custom - proxy pass to the destination
                stream {
                  server {
                    listen ${DestinationPort};
                    proxy_pass ${DestinationIP}:${DestinationPort};
                  }
                }
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.nginxInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource nginxInstance --region ${AWS::Region} && systemctl restart nginx
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      InstanceType: t3.small
      KeyName: !Ref KeyName
      SubnetId: !Ref Subnet1Id
      SecurityGroupIds:
      - !Ref nginxSecurityGroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y aws-cfn-boostrap cloud-init aws-cli
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource nginxInstance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource nginxInstance --region ${AWS::Region}
  nginxListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref targetGroup
        Type: forward
      LoadBalancerArn: !Ref 'loadBalancer'
      Port: !Ref DestinationPort
      Protocol: TCP
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-04681a1dbd79675a5
